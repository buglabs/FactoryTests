#!/usr/bin/env python

"""

	bugtestmon (c)2010 Bug Labs

	log the boot sequence for verification test
	Hit enter to activate the console then
	launch the test script
"""

import serial
import sys
import os
import re
import signal
import time
import datetime
import string
import tty,fcntl, termios
import optparse

#
# globals
#
# VERSION = "1.0"	# RedBoot
VERSION = "1.1"		# U-Boot

bug_serial_port = '/dev/ttyUSB1'
logfile_name = "tmp_logfile"
datafile_name = "location_datafile"
logfile = 0
datafile = 0
interactive_error = 0
ser_num = ""
ee_date = ""
mc = ""
pc = ""
pcm = ""
ver = ""
eth = ""

interactive = True
timed_out = False

TIMEOUT10=10
TIMEOUT20=20
TIMEOUT30=30
TIMEOUT40=40
TIMEOUT50=50

#
# regular expressions
#
bug_prompt = re.compile(r"BUGBASE /]#")
#start_prompt = re.compile(r"activate this console")
start_prompt = re.compile(r"System initialization complete")
test_prompt = re.compile(r"(y/n/r)")
date_prompt = re.compile(r"WWYY")
ser_prompt = re.compile(r"alphanumeric")
codes_prompt = re.compile(r"3 digits")
man_prompt = re.compile(r"alpha")
pcb_prompt = re.compile(r"MM.mm")
mac_prompt = re.compile(r"0xXX:0xXX:0xXX:0xXX:0xXX:0xXX")
uboot_prompt = re.compile(r"BUGBASE2 #")
uboot_autoboot = re.compile(r"autoboot:")

#
# subroutines
#
# write to log file and output to screen
def log_output(l):
	global logfile

	print l
	logfile.write("%s\n" % (l))

	# log output until re object found


def look_for(reo, termination=0):
	global ser
	global timed_out
	global ping_ok
	global button_ok
	global error_string
	global bug_ip_address

	timeout = 0
	done = False
	timed_out = False
	while True and not done:
		l = ""
		c = ""
		while c != '\n' and not done:
			c = ser.read(1)
			if c != '\n':
				l = l + c

		# re termination
		if reo.search(l):
			done = True

		# timeout termination
#		if termination > 0:
#			timeout = timeout + 1
#			if timeout == termination:
#				timed_out = True
#				done = True

		# print to log file
		log_output(l)

#
# get interactive test results
#
def response_timeout(signum, frame):
	pass

def get_test_response(l):
	global logfile
	global timed_out
	global interactive_error

	log_output("%s" % (l))

		# timeout handler set up
	signal.signal(signal.SIGALRM, response_timeout)
	signal.alarm(TIMEOUT10)

		# get initial response
	timed_out = False
	l = ""
	while (not timed_out) and (l == ""):
		try:
			l = sys.stdin.readline()
			log_output(l)
		except:
			timed_out = True
			log_output("\t>>> RESPONSE TIMEOUT <<<\n")
			interactive_error = interactive_error + 1
		signal.signal(signal.SIGALRM, signal.SIG_IGN)

#
#	main()
#

parser = optparse.OptionParser(usage="""\
	%prog [logfile] [port]
	intercept certain verification test events.""")

parser.add_option("-l", "--log-file", dest="logfile",
    help="name of logfile all session traffic will be written to",
    default=None)

parser.add_option("-p", "--port", dest="port",
    help="port, a device name",
    default=None)
(options, args) = parser.parse_args()

if options.logfile is None:
	print "\nERROR - MUST SPECIFY LOG FILE NAME \n"
	sys.exit(-1)

if options.port is None:
	print "\nERROR - MUST SPECIFY SERIAL PORT NAME\n"
	sys.exit(-1)

# open serial port
try:
	ser = serial.Serial(options.port, baudrate=115200, bytesize=8, xonxoff=0, rtscts=0, timeout=1)	# open serial port with 1 second timeout
except:
	print "\nERROR - COULDN'T OPEN SERIAL PORT \n"
	sys.exit(-1)

#os.system("clear")
print "\n\tBUG Base 2.0 Factory Verification Test\n"

	# open log file
try:
	logfile = open(options.logfile, "a+")
except:
	print "\n>>>ERROR: Can't open %s for appending\n" % (logfile_name)
	sys.exit(-1)

#print "\n>>> Writing all output to log file %s" % (logfile_name)
#ser_num = logfile_name	# save to put in EEPROM

log_output("\nStarting BugBase 2.0 verification Tests\n")
log_output("\n\toutput file = %s" % (logfile_name))
log_output("\tdate = %s" % (datetime.datetime.now().ctime()))
log_output("\tday = %d" % (time.localtime()[7]))
log_output("\tweek = %d" % (time.localtime()[7] / 7))


	# calculate WWYY
if (time.localtime()[7] / 7) < 10:
	ee_date = "0%d%s" % (time.localtime()[7] / 7, str(datetime.date.today().year)[2:]) # save to put in EEPROM
else:
	ee_date = "%d%s" % (time.localtime()[7] / 7, str(datetime.date.today().year)[2:]) # save to put in EEPROM

print "\n===========================================================\n"
print "Plug the power cable into the base or press the reset\n"
print "button on the dock......\n"
print "===========================================================\n"
#signal.signal(signal.SIGALRM, response_timeout)
#signal.alarm(TIMEOUT50)

fd = sys.stdin.fileno()

oldterm = termios.tcgetattr(fd)
newattr = termios.tcgetattr(fd)
newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO
termios.tcsetattr(fd, termios.TCSANOW, newattr)

oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)

try:

	look_for(start_prompt)
	ser.write(" \n\n\n")
	look_for(bug_prompt)
	ser.write("sleep 20 && bugtest.sh\n\n\n")
except:
	log_output("\t>>> Unexpected Death in the python family, meh <<<\n")
	interactive_error = interactive_error + 1
signal.signal(signal.SIGALRM, signal.SIG_IGN)

termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)

